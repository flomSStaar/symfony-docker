import { expect, it } from 'bun:test'
import { getSymfonyScript } from '@/features/init/files/sf'

it('should return the sf content', () => {
  const sf = getSymfonyScript()

  expect(sf).toBe(
    '#!/usr/bin/env bash\n\nDC="docker compose -f compose.local.yml --env-file .env --env-file .env.local"\nDE="$DC exec"\nDR="$DC run --rm"\n\nsuccess() {\n  echo -e "\\033[32m${1}\\033[0m"\n}\n\nerror() {\n    echo -e "\\033[31m`basename $0`: ${1}\\033[0m"\n}\n\nusage() {\n\n   echo\n   echo -e "usage: \\033[32m`basename $0`\\033[0m <command>"\n   echo\n   echo "commands:"\n   echo "- dev                    Launch the development server"\n   echo "- build                  Build the image of the compose file"\n   echo "- start [service]        Start the development or the specified service"\n   echo "- stop [service]         Stop the development server or the specified service"\n   echo "- restart [service]      Restart the development server or the specified service"\n   echo "- clean                  Clean all volatiles directories (var, vendor, node_modules, public/build)"\n   echo "- log [service]          Print logs of all services or specific one if given"\n   echo "- ps                     List all running containers"\n   echo "- database               Execute doctrine:schema:update"\n   echo "- connect <service>      Connect to the container"\n   echo "- console                Execute bin/console command"\n   echo "- yarn                   Execute yarn command"\n   echo "- composer               Execute composer command"\n   echo "- <vendor-binary>        Execute vendor binary (ex: phpstan, php-cs-fixer, ...) if installed"\n   echo\n   echo "services:"\n   echo "- php                    PHP, Symfony service"\n   echo "- db                     Database service"\n   echo "- node                   Node service (optional)"\n   echo "- mail                   Mail service (optional)"\n   echo "- minio                  Minio (S3) service (optional)"\n   echo "- influxdb               InfluxDb service (optional)"\n   echo "- pdf                    Gotenberg (PDF) service (optional)"\n   echo\n}\n\nisDockerRunning() {\n  docker info &> /dev/null\n  if [[ $? -ne 0 ]]; then\n    error "Docker is not installed or launched"\n    exit 2\n  fi\n}\n\nfunction handle_containers_ctrlc() {\n  $DC down "$@"\n}\n\n## Show help\nif [[ "$1" == "-h" || "$1" == "--help" ]]; then\n    usage\n    exit 0\nfi\n\n## Variables\nCOMMAND="$1"\nshift\n\nisDockerRunning\n\ncase "$COMMAND" in\n  "dev")\n  trap handle_containers_ctrlc SIGINT\n  $DC up --build --force-recreate "$@"\n  ;;\n  "build")\n  $DC build "$@"\n  ;;\n  "start")\n  $DC up --build --force-recreate -d "$@"\n  ;;\n  "stop")\n  $DC down "$@"\n  ;;\n  "restart")\n  $DC restart "$@"\n  ;;\n  "clean")\n  rm -rf public/build node_modules vendor var\n  ;;\n  "ps")\n  $DC ps\n  ;;\n  "log")\n  $DC logs -f "$@"\n  ;;\n  "database")\n  $DE php symfony console doctrine:schema:update --force --complete\n  ;;\n  "connect")\n  $DE -it "$@" sh\n  ;;\n  "console")\n  $DE -it php symfony console "$@"\n  ;;\n  "yarn")\n  $DR -it node yarn "$@"\n  ;;\n  "composer")\n  $DE -it php composer "$@"\n  ;;\n  *)\n  # Check if the command is a vendor binary\n  if [[ -f "./vendor/bin/$COMMAND" ]]; then\n    $DE -it php ./vendor/bin/$COMMAND $*\n  else\n    error "Unknown command"\n    usage\n    exit 1\n  fi\nesac\n\nexit 0\n',
  )
})

it('should not be empty', () => {
  const sf = getSymfonyScript()

  expect(sf).not.toBe('')
})
